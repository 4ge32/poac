version: 2.1

executors:
  x86_64:
    parameters:
      compiler:
        description: "Compiler Name"
        type: string
      version:
        description: "Compiler Version"
        type: integer
    docker:
      - image: poacpm/x86_64-unknown-linux-gnu
    environment:
      CXX: << parameters.compiler >>-<< parameters.version >>

  clang:
    parameters:
      compiler:
        description: "Compiler Name"
        type: string
      version:
        description: "Compiler Version"
        type: integer
    docker:
      - image: poacpm/x86_64-unknown-linux-gnu:<< parameters.compiler >>-<< parameters.version >>


commands:
  poac-install:
    steps:
      - restore_cache:
          keys: # restores saved poac cache
            - v1-poac-cache-{{ checksum "poac.lock" }}
            - v1-poac-cache-{{ checksum "poac.yml" }}
            - v1-poac-cache-{{ .Branch }}
            - v1-poac-cache
      - run: poac install # source file only (no pre-built)
      - save_cache:
          key: v1-poac-cache-{{ checksum "poac.lock" }}
          paths: "deps"
      - save_cache:
          key: v1-poac-cache-{{ checksum "poac.yml" }}
          paths: "deps"
      - save_cache:
          key: v1-poac-cache-{{ .Branch }}
          paths: "deps"
      - save_cache:
          key: v1-poac-cache
          paths: "deps"

  default-build:
    steps:
      - run: uname -sm
      - run: mkdir build && cd build && cmake .. && make
      - run: ./build/poac -h
      - run: file ./build/poac

  default-test:
    steps:
      - run:
          command: >
            ./build/poac test --report --
            --output_format=XML
            --log_level=all
            --report_level=no
      - store_test_results:
          path: _build/test/report


jobs:
  checkout_code:
    docker:
      - image: poacpm/poac
    steps:
      - checkout
#      - poac-install

      - persist_to_workspace:
          root: .
          paths: .

  x86_64-unknown-linux-gnu:
    parameters:
      exec:
        type: executor
    executor: << parameters.exec >>
    steps:
      - attach_workspace:
          at: .
      - default-build
#      - default-test

  release_build:
    parameters:
      exec:
        type: executor
    executor: << parameters.exec >>
    working_directory: /tmp/workspace/x86_64-unknown-linux-gnu
    steps:
      - attach_workspace:
          at: /tmp/workspace/x86_64-unknown-linux-gnu
      - run: mkdir build && cd build && cmake -DCMAKE_BUILD_TYPE=Release .. && make
      - run: ./build/poac -h
      - run: file ./build/poac
      - persist_to_workspace:
          root: /tmp/workspace
          paths: x86_64-unknown-linux-gnu

  publish:
    docker:
      - image: circleci/golang:1.11
    steps:
      - attach_workspace:
          at: .
      - run: mkdir out
      - run: tar czf ./out/x86_64-unknown-linux-gnu.tar.gz ./poac
      - run: go get github.com/tcnksm/ghr
      - run: cp -r ./poac/.git ./
      - run: ghr -t $GITHUB_TOKEN $CIRCLE_TAG out
#      - run: poac publish


workflows:
  version: 2
  builds:
    jobs:
      - checkout_code
      - x86_64-unknown-linux-gnu:
          exec:
            name: x86_64
            compiler: g++
            version: 7
          requires:
            - checkout_code
      - x86_64-unknown-linux-gnu:
          exec:
            name: x86_64
            compiler: g++
            version: 8
          requires:
            - checkout_code
      - x86_64-unknown-linux-gnu:
          exec:
            name: x86_64
            compiler: g++
            version: 9
          requires:
            - checkout_code
      - x86_64-unknown-linux-gnu:
          exec:
            name: clang
            compiler: clang
            version: 6
          requires:
            - checkout_code
      - x86_64-unknown-linux-gnu:
          exec:
            name: clang
            compiler: clang
            version: 7
          requires:
            - checkout_code
      - x86_64-unknown-linux-gnu:
          exec:
            name: clang
            compiler: clang
            version: 8
          requires:
            - checkout_code
  nightly:
    triggers:
      - schedule:
          cron: "0 0 * * *"
          filters:
            branches:
              only:
                - master
                - beta
    jobs:
      - checkout_code
      - x86_64-unknown-linux-gnu:
          exec:
            name: x86_64
            compiler: g++
            version: 9
          requires:
            - checkout_code
  release:
    jobs:
      - checkout_code:
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /^[0-9]+(\.[0-9]+){2}.*$/
      - release_build:
          exec:
            name: x86_64
            compiler: g++
            version: 9
          requires:
            - checkout_code
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /^[0-9]+(\.[0-9]+){2}.*$/
      - publish:
          requires:
            - release_build
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /^[0-9]+(\.[0-9]+){2}.*$/
